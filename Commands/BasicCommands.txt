
#Wildcards:

* (represents unlimited number of character of any lenght)
    >>> word*   -->     looks for everything, starting with word, the rest it doesn't metter

? (represents one caracter)
    >>> ?at     -->     looks for everything, ending with 'at', regardless the starting letter

[](used to match the characters that will appear inside the sqare brackets)
    >>> [c,b]at -->     looking for everything, starting with 'c', followed and ended by 'at' and with 'a', followed and ended by 'at'


#SomeBasicStuff

pwd:

    Present working directory
    ---> pwd

whoami:

    returns user's name or 'root'
    ---> whoami

cd:

    change directory
    ---> cd /directory

    * cd ..     (to move one level up towards root or '/') (one set of '..' per eacr dorectory)
    * cd /      (to move all the way to the root or '/')

ls:

    list files and directories in given or (by default) current directory
    ---> ls */directory

    * ls -l     (l = long --> long listing) (to see their permissions, owner, size and when they were last modified)
    * ls -la    (to see hidden directories)

help:

    made for every command to see their use and a short description
    ---> command --help/-h/-?           # not all commands supports all the options! But at least one they do

man:

    most commands and applications have manual page; provides us with more information (such as = sa. a description and synopsis of the command or application)
    ---> man command

    *q      (to wuit man page)


#FindingStuff

locate:

    print everx directory path consisting of given word
    ---> locate word

    # is updated only once in a day

whereis:

    to locate binary file
    --> whereis file_name
    # It returns the location, source and man page

which:

    returns the location of the binaries in the 'PATH' variable; it looks the directories listed in the 'PATH' variable
    --> which file_name

find:

    --> find directory options expression
        #find / -type f -name apache2   ;   '/' = where to start searching; 
                                        ;   '-type f' = type of file to search for (f=ordinary file); 
                                        ;   '-name apache2' = name of the file;
    # It is capable of begining the search in any designated directory and went through every subdirectory looking for a number of different parameters, including filename, date of creation or modification, the owner, the group, permissions and size
    # ! If the file has an extension (different prefix), the search will not find a match

    *find directory -type f --name file.*       # looks for every file, any extension


#FilteringWithGrep

    returns searchings containing of a keyword
    --> any_command | grep keyword


#FilesEditing

cat:
    
    displays the content of the file, it can also be used for creating small files
    --> cat file_path

    * cat > file_name       # creates file
        # Linux goes into interactive mode and now we can write into a file;
            'CTRL-D'    -->     pressing this, we will quit interactive mode

    * cat >> file_name      # allows us to append more text to a file
        # Linux goes into interactive mode and now we can append text into a file;
            'CTRL-D'    -->     pressing this, we will quit interactive mode

    * cat > file_name       # overwrites the text, already written in the file
        # Linux goes into interactive mode and now we can overwrite text in a file;
            'CTRL-D'    -->     pressing this, we will quit interactive mode

touch:

    if the file doesn't already exsists, it creates a file by default
    --> touch new_file

mkdir:

    makes new directory
    --> mkdir new_directory

cp:

    creates a duplicate of the file in the new location and leaves the old one in place
    --> touch old_file | cp old_file /path/to/new/file
    #It doesn't matter if new file already exixts or not; if doesn't Linux will make one and copy the content; 
    #If we don't rename the file when we copy it, the file will retain the original name by default

mv:

    to move a file or directory to a new location or simply to give an exsisting file a new name
    --> mv old_filename new_filename

rm:

    to remove a file
    --> rm file

rmdir:

    to remove a directory
    --> rmdir directory
    # ! removes only if the directory is empty

    *rm -r directory        # removes directory and all of its content


#TextManipulating

head:

    To view the beginning of a file
    --> head -lines file                                # lines = number of lines, we want to see, counting from the first line in a document
    #By default it displays first 10 lines of file

tail:

    To view the last lines of a file
    --> tail -lines file                                # lines = number of lines, we want to see, counting from the last line in a document
    #By deafult it displays last 10 lines of file

    * tail -n +507 file | head -n 6                      # returns all lines from bottom up to line 507 | return top 6 lines of given text

nl:

    numerate the lines in a file when displayed
    --> nl file

sed:

    Contraction of Stream Editor: To search for occurrences of a word or a text pattern and then perform some action on it;
    --> sed s/old/new/g dst_path > finish_file

        's'   -->   performs a search
        'old' -->   the term to search for
        'new' -->   the term to replace searched term
        'g'   -->   replacement is performed globally ==> to change all occurrences of given phrase.
            ! If left empty, only the first occurrence will be changed !
            ! If instead given a number (fe 2), only the number (second) occurence will be chandes
        'dst_file' -->   where to save the resoult, the destination file

    # used to find and replace keyword or phrases
    # ! It just copies content of the file, regarding changes into a new file, now neccessarily pre-created
    # ! The old file stays the same


#ViewingFile

more:

    To dysplay a page of a file at a time and lets you page down through it using the ENTER key
    --> more file
    #in the lower-left corner is shown how much of the file is shown (%)
        'q' -->     Pressing this, you will quit
    
less:

    The same as more + it can be filtered
    --> less file
    # in the bottom-left of the screen less highlite the path to the file
        '/' -->     less  will let you search for terms in the file
            It takes you to the first occurrence of output and highlight it
        'n' -->     move to the next occurence of output


#GivingPermissions

chown:

    change owner
    --> chown user /directory/files

chgrp:

    change group
    --> chgrp group directory/file


#CheckingPermission

    list -long
    --> ls -l directory/file
        >>>(1)(2) (3) (4) (5)                                       # - 1 (d)           = file type; 
        f.e.:   drwxr-xr-x 5 root 4096 Feb 30 00:00 charset         # - 2 (rwxr-xr-x)   = The permission on the file for owner (rwx), gropus (r-x) and all other users (r-x), respectively;
                                                                    #   -> '-' = permission had not been given;
                                                                    #   -> Note that: sers can have permission to execute only either binaries or scripts;
                                                                    # - 3 (5)           = The number of links
                                                                    # - 4 (root)        = The owner of the file;
                                                                    # - 5 (4096)        = the size of the file;
                                                                    # - 6 (Feb 30 00:00)= when the file was created;
                                                                    # - 7 (charset)     = The name of hte file;


#ChangingPermission

Numerical presentation:

    000 0   =   ---
    001 1   =   --x
    010 2   =   -w-
    011 3   =   -wx
    100 4   =   r--
    101 5   =   r-x
    110 6   =   rw-
    111 7   =   rwx
    --> we can sum the permissions; rwx = 4 2 1 --> 4+2+1 = 7;
    all permissions for  owner, group and all users --> 777
    
    chmod 777 file

Symbolic presentention:     with UGO (user or owner, group and others)

    chmod u/g/o -/+/=r/w/x file                                     # 'u' = user; 'g' = group; 'o' = others;
                                                                    # '-' = removes permission; '+' = adds permission; '=' = sets permission 
                                                                    # 'r' = read; 'w' = write; 'x' = execute
    --> we can set multiple permission for multiple users, using a comma: '>>>chmod u+r,o+x file

    SUID (user ID); SGID (group ID)

    changing permissions for:
        SUID: chmod 4numerical_presentation file; now any user can execute the file with the permissions of the owner (but those permissions don't extend beyond the use of that file)
        SGID: chmod 2numerical_presentation file; now any user has granted permissions of the owner's group

LookForFilesRootUserOrSysadmin, WithThePermission 4000

    find / -user root -perm -4000
        #look at the top filesystem with the '/' syntax for files owned by root, specified with the user 'root', and that have the SUID permission bit set (-perm -4000)
        >>> -rwxsr-xr-x 1 root 140944 Feb 30 00:00 sudo
            s --> instead of the x; like that kali represents that SUDO bit is set (means that anyone who runs that file, has root privilages)
        